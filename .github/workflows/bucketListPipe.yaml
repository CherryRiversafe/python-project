name: BucketList-tf

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  TF_VAR_access_key: ${{ secrets.AWS_ACCESS_KEY }}
  TF_VAR_secret_key: ${{ secrets.AWS_SECRET_KEY }}
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}
  TF_VAR_DB_USERNAME: ${{ secrets.AWS_RDS_DB_USERNAME }}
  DOCKER_NAME: ${{secrets.DOCKER_ACCESS_TOKEN_NAME}}
  DOCKER_TOKEN: ${{secrets.DOCKER_ACCESS_TOKEN_KEY}}
  TF_DB_PASSWORD: ${{ secrets.TF_DB_PASSWORD }}
  TF_RDS_ENDPOINT: ${{ secrets.TF_RDS_ENDPOINT }}
  gitRepo_token: ${{secrets.GIT_TOKEN}}
  AWS_REGION: eu-west-2

permissions:
  contents: read
  id-token: write
  



jobs:
  terraform:
    name: "Terraform Infrastructure Management"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform
   

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0
          terraform_wrapper: false
         

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: eu-west-2


      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan -var="db_username=${{ env.TF_VAR_DB_USERNAME }}"


      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -var="db_username=${{ env.TF_VAR_DB_USERNAME }}"

      - name: Install GitHub CLI
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y

      - name: Authenticate with GitHub CLI
        env: 
          gitRepo_token: ${{secrets.GIT_TOKEN}}
        run: echo "$gitRepo_token" | gh auth login --with-token

      - name: Set secret from Terraform db passwd
        run: |
            rds_password=$(terraform output -raw DB_PASSWORD)
            gh secret set TF_DB_PASSWORD -b"$rds_password" -R CherryRiversafe/python-project
    
    
      - name: Set secret from Terraform db endpoint
        run: |
             db_endpoint=$(terraform output -raw rds_endpoint)
             gh secret set TF_rds_endpoint -b"$db_endpoint" -R CherryRiversafe/python-project
          
  # unit-test-backend:
  #   name: "Prepare python environment"
  #   runs-on: ubuntu-latest
  #   needs: terraform
  #   defaults:
  #     run:
  #       working-directory: ./backend
  #   env:
  #     TF_DB_PASSWORD: ${{ secrets.TF_DB_PASSWORD }}
  #     TF_RDS_ENDPOINT: ${{ secrets.TF_rds_endpoint }}
  #     TF_VAR_DB_USERNAME: ${{ secrets.AWS_RDS_DB_USERNAME }}
  #     AWS_REGION: eu-west-2
    
  #   steps:
  #       - uses: actions/checkout@v4
  #       - uses: actions/setup-python@v5
  #         with:
  #           python-version: "3.13"
          
  #       - run: |
  #          echo "req"
  #          pip install -r requirements.txt
           
  #       - run: |
  #          echo "te
  #          pytest test_api.py --capture=tee-sys --verbose -vv -s
      
  docker-backend:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: terraform
    defaults:
      run:
        working-directory: ./backend/docker
    steps:
        - uses: actions/checkout@v4
        
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3
        
        - name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{secrets.DOCKER_ACCESS_TOKEN_NAME}}
            password: ${{ secrets.DOCKER_ACCESS_TOKEN_KEY }}
        
        - name: Build and push
          uses: docker/build-push-action@v5
          with:
              context: ./backend/docker
              file: ./backend/docker/Dockerfile
              push: true
              tags: cherryriversafe/bucketlist-backend:latest
          
        - run: docker build -f backend/docker/Dockerfile.


   
   
       
  # deploy-EKS:
  #   name: deploy docker image from registry to EKS
  #   jobs:
  #     deploy:
  #       runs-on: ubuntu-latest
  #       steps:
  #         - name: Checkout code
  #           uses: actions/checkout@v4

  #         - name: Configure AWS credentials
  #           uses: aws-actions/configure-aws-credentials@v4
  #           with:
  #             aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
  #             aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
  #             aws-region: eu-west-2

  #         - name: Install and configure kubectl
  #           uses: aws-actions/amazon-eks-kubectl-action@v2
  #           with:
  #             cluster-name: bucketListBackend

  #         - name: Deploy to EKS
  #           run: |
  #             kubectl apply -f bucketList_k8s.yaml

  # deploy-frontend-s3:
  #   jobs:
  #     deploy:
  #       runs-on: ubuntu-latest
  #       steps:
  #         - name: Checkout code
  #           uses: actions/checkout@v3

  #         - name: Set up Node.js
  #           uses: actions/setup-node@v3
  #           with:
  #             node-version: 18

  #         - name: Install dependencies
  #           run: npm install

  #         - name: Build application
  #           run: npm run build
  #           env:
  #             VITE_APP_BASE_URL: ${{ secrets.bucket_list_url }}
  #             VITE_APP_ENVIRONMENT: production

  #         - name: Configure AWS credentials
  #           uses: aws-actions/configure-aws-credentials@v4.0.2
  #           with:
  #             aws-region: eu-west-2
  #             aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
  #             aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}

  #         - name: Deploy to S3
  #           run: aws s3 sync ./dist/ s3://${{ secrets.AWS_S3_BUCKET_NAME }} --delete --region eu-west-2




                  
