name: BucketList-tf

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  TF_VAR_access_key: ${{ secrets.AWS_ACCESS_KEY }}
  TF_VAR_secret_key: ${{ secrets.AWS_SECRET_KEY }}
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}
  TF_VAR_DB_USERNAME: ${{ secrets.AWS_RDS_DB_USERNAME }}
  DOCKER_NAME: ${{secrets.DOCKER_ACCESS_TOKEN_NAME}}
  DOCKER_TOKEN: ${{secrets.DOCKER_ACCESS_TOKEN_KEY}}
  TF_DB_PASSWORD: ${{ secrets.TF_DB_PASSWORD }}
  TF_RDS_ENDPOINT: ${{ secrets.TF_RDS_ENDPOINT }}
  gitRepo_token: ${{secrets.GIT_TOKEN}}
  DOCKER_USERNAME: ${{secrets.DOCKER_USERNAME}}
  DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
  AWS_REGION: eu-west-2

permissions:
  contents: read
  id-token: write
  



jobs:
  terraform:
    name: "Terraform Infrastructure Management"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform
   

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0
          terraform_wrapper: false
         

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: eu-west-2


      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan -var="db_username=${{ env.TF_VAR_DB_USERNAME }}"


      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -var="db_username=${{ env.TF_VAR_DB_USERNAME }}"

      - name: Install GitHub CLI
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y

      - name: Authenticate with GitHub CLI
        env: 
          gitRepo_token: ${{secrets.GIT_TOKEN}}
        run: echo "$gitRepo_token" | gh auth login --with-token

      - name: Set secret from Terraform db passwd
        run: |
            rds_password=$(terraform output -raw DB_PASSWORD)
            gh secret set TF_DB_PASSWORD -b"$rds_password" -R CherryRiversafe/python-project
      
      - name: Capture Terraform output
        run: |
          TF_LB_DNS=$(terraform output -raw alb_dns_name)
          gh secret set TF_LB_DNS -b"$TF_LB_DNS" -R CherryRiversafe/python-project

    
      - name: Set secret from Terraform db endpoint
        run: |
             db_endpoint=$(terraform output -raw rds_endpoint)
             gh secret set TF_rds_endpoint -b"$db_endpoint" -R CherryRiversafe/python-project
             s3_frontend_url=$(terraform output -raw s3_frontend_url)
             gh secret set TF_s3_frontend_url -b"$s3_frontend_url" -R CherryRiversafe/python-project
             s3_frontend_bucketname=$(terraform output -raw s3_frontend_bucketname)
             gh secret set TF_s3_frontend_bucketname -b"$s3_frontend_bucketname" -R CherryRiversafe/python-project
          
  # unit-test-backend:
  #   name: "Prepare python environment"
  #   runs-on: ubuntu-latest
  #   needs: terraform
  #   defaults:
  #     run:
  #       working-directory: ./backend
  #   env:
  #     TF_DB_PASSWORD: ${{ secrets.TF_DB_PASSWORD }}
  #     TF_RDS_ENDPOINT: ${{ secrets.TF_rds_endpoint }}
  #     TF_VAR_DB_USERNAME: ${{ secrets.AWS_RDS_DB_USERNAME }}
  #     AWS_REGION: eu-west-2
    
  #   steps:
  #       - uses: actions/checkout@v4
  #       - uses: actions/setup-python@v5
  #         with:
  #           python-version: "3.13"
          
  #       - run: |
  #          echo "req"
  #          pip install -r requirements.txt
           
  #       - run: |
  #          echo "te
  #          pytest test_api.py --capture=tee-sys --verbose -vv -s
      
  docker-backend:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Logout from Docker Hub (Cleanup)
        run: docker logout
        continue-on-error: true # Don't fail if not logged in
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN_KEY }}
         

      - name: Verify Docker Login
        run: docker info # This will show if you are logged in

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: docker.io/cherryriversafe/bucketlist-backend:latest
          build-args: |
            TF_VAR_DB_USERNAME=${{ secrets.AWS_RDS_DB_USERNAME }}
            TF_DB_PASSWORD=${{ secrets.TF_DB_PASSWORD }}
            TF_RDS_ENDPOINT=${{ secrets.TF_RDS_ENDPOINT }}

      - name: Display Docker Images (Troubleshooting)
        run: docker images


  deploy-EKS:
    name: deploy docker image from registry to EKS
    runs-on: ubuntu-latest
    needs: docker-backend
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: eu-west-2

      - name: Install kubectl
        uses: azure/setup-kubectl@v2.0
        with:
          version: 'v1.24.0'

      - name: Place deployment env vars
        run: |
          sed -i "s|{{TF_VAR_DB_USERNAME}}|{{ secrets.TF_VAR_DB_USERNAME }}|g" bucketlist_k8s.yaml
          sed -i "s|{{TF_DB_PASSWORD}}|{{ secrets.TF_DB_PASSWORD }}|g" bucketlist_k8s.yaml
          sed -i "s|{{TF_RDS_ENDPOINT}}|{{ secrets.TF_RDS_ENDPOINT }}|g" bucketlist_k8s.yaml
      
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name my-fargate-cluster --region eu-west-2 
          aws sts get-caller-identity
          kubectl apply -k "github.com/aws/eks-charts/stable/aws-load-balancer-controller//crds?ref=master"
          kubectl get crd | grep elbv2.k8s.aws
          kubectl apply -f bucketlist_k8s.yaml
          kubectl apply -f configmap.yaml
          kubectl describe configmap -n kube-system aws-auth
          kubectl apply -f service.yaml 
          
    

  deploy-frontend-s3:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    needs: terraform
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.git_pat }}
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          npm install --legacy-peer-deps --force
          npm install amazon-cognito-identity-js axios

      - name: Install Vite
        run: npm install -D vite

      - name: Authenticate with GitHub CLI
        env: 
          GITHUB_TOKEN: ${{secrets.GIT_TOKEN}}
        run: gh auth setup-git

      - name: Commit and push changes
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add src/home.jsx
          git commit -m "Update config with Terraform output" || echo "No changes to commit"
          git push https://${{ secrets.git_pat }}@github.com/CherryRiversafe/python-project.git HEAD:main

      - name: Display package.json
        run: cat package.json

      - name: Build application
        run: npx vite build
        env:
          TF_LB_DNS: ${{secrets.TF_LB_DNS}}
          #VITE_APP_BASE_URL: ${{secrets.TF_s3_frontend_url}}
          VITE_APP_ENVIRONMENT: production

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-region: eu-west-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}

      - name: Deploy to S3
        run: aws s3 sync ./dist/ s3://bucketlist-frontend-2025 --region eu-west-2




                      
